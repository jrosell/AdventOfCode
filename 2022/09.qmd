---
title: "Day 9"
format: html
editor: visual
---

[AdventOfCode](https://jrosell.github.io/AdventOfCode/) \> 2022

## Part 1: How many positions does the tail of the rope visit at least once?

I manually downloaded my personal [day 9 input file](https://adventofcode.com/2022/day/9) as a logged user, and here I get the data in a more appropriate shape.

```{r}
library(tidyverse)

data <- here::here("2022/09_input") %>% 
    read_csv(
      col_names = c("line"),
      show_col_types = FALSE
    ) 
data
```

We expect 13 as a response of this input:

```{r}
test <- tribble(
        ~line,
        "R 4",
        "U 4",
        "L 3",
        "D 1",
        "R 4",
        "D 1",
        "L 5",
        "R 2"
    )
test
```

```{r}
moves <- list(
  "R" = c(1, 0),
  "L" = c(-1, 0),
  "U" = c(0, -1),
  "D" = c(0, 1)
)

find_position <- function(status) {
    dx <- status[[1]][1] - status[[2]][1];
    dy <- status[[1]][2] - status[[2]][2];
    c(dx, dy)
}
             
update_status <- function(status, position) {
    dx <- position[1]
    dy <- position[2]
    if (abs(dx) > 1) {
        if (dx > 0) status[[2]][1] <- status[[2]][1] + 1
        if (dx < 0) status[[2]][1] <- status[[2]][1] - 1
        if (dy > 0) status[[2]][2] <- status[[2]][2] + 1
        if (dy < 0) status[[2]][2] <- status[[2]][2] - 1
    } else if (abs(dy) > 1) {
        if (dy > 0) status[[2]][2] <- status[[2]][2] + 1
        if (dy < 0) status[[2]][2] <- status[[2]][2] - 1
        if (dx > 0) status[[2]][1] <- status[[2]][1] + 1
        if (dx < 0) status[[2]][1] <- status[[2]][1] - 1
    }
    status
}
  
move_rope <- function(input) {
    data <- pull(input) %>% str_split(" ")
    result <- list()
    status <- list()
    status <- append(status, list(c(0, 0)))
    status <- append(status, list(c(0, 0)))
    for (motion in seq_along(data)) {
        direction <- data[[motion]][1]
        steps <- as.integer(data[[motion]][2])
        for (i in 1:steps) {
            # print(paste0("motion ", motion," direction ", direction," steps ", i, "/", steps))
            status[[1]] <- c(
              status[[1]][1] + moves[[direction]][1],
              status[[1]][2] + moves[[direction]][2]
            )
            position <- find_position(status)
            status <- update_status(status, position)
            result <- append(result, status[2])
        }
    }
    result
}

moved <- move_rope(test)
moved %>% map_chr(~paste(.x, collapse=",")) %>% unique() %>% length()
```

Here's the result for my input:

```{r}
tictoc::tic("part1")
moved <- move_rope(data)
moved %>% map_chr(~paste(.x, collapse=",")) %>% unique() %>% length()
tictoc::toc()
```


## Part 2: Simulate your complete series of motions on a larger rope with ten knots. How many positions does the tail of the rope visit at least once?

```{r}

find_position <- function(status, knot) {
    dx <- status[[knot - 1]][1] - status[[knot]][1];
    dy <- status[[knot - 1]][2] - status[[knot]][2];
    c(dx, dy)
}

update_status <- function(status, position, knot) {
    dx <- position[1]
    dy <- position[2]
    if (abs(dx) > 1) {
        if (dx > 0) status[[knot]][1] <- status[[knot]][1] + 1
        if (dx < 0) status[[knot]][1] <- status[[knot]][1] - 1
        if (dy > 0) status[[knot]][2] <- status[[knot]][2] + 1
        if (dy < 0) status[[knot]][2] <- status[[knot]][2] - 1
    } else if (abs(dy) > 1) {
        if (dy > 0) status[[knot]][2] <- status[[knot]][2] + 1
        if (dy < 0) status[[knot]][2] <- status[[knot]][2] - 1
        if (dx > 0) status[[knot]][1] <- status[[knot]][1] + 1
        if (dx < 0) status[[knot]][1] <- status[[knot]][1] - 1
    }
    status
}
  
move_rope <- function(input, rope_size) {
    data <- pull(input) %>% str_split(" ")
    result <- list()
    status <- list()
    for(zzz in 1:rope_size){
        status <- append(status, list(c(0, 0)))
    }
    for (motion in seq_along(data)) {
        direction <- data[[motion]][1]
        steps <- as.integer(data[[motion]][2])
        for (i in 1:steps) {
            # print(paste0("motion ", motion," direction ", direction," steps ", i, "/", steps))
            status[[1]] <- c(
              status[[1]][1] + moves[[direction]][1],
              status[[1]][2] + moves[[direction]][2]
            )
            for (knot in 2:rope_size) {
                #print("knot")
                # print(knot)
                position <- find_position(status, knot)
                status <- update_status(status, position, knot)
            }
            result <- append(result, status[rope_size])
            # print(paste0("knot=",rope_size,",",status[rope_size]))
        }
    }
    result
}

moved <- move_rope(test, 2)
moved %>% map_chr(~paste(.x, collapse=",")) %>% unique() %>% length()

moved <- move_rope(test, 10)
moved %>% map_chr(~paste(.x, collapse=",")) %>% unique() %>% length()
```


Here's the result for my input:

```{r}
tictoc::tic("part2")
moved <- move_rope(data, 10)
moved %>% map_chr(~paste(.x, collapse=",")) %>% unique() %>% length()
tictoc::toc()
```

