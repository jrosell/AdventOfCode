---
title: "Day 5"
format: html
editor: visual
---

[AdventOfCode](https://jrosell.github.io/AdventOfCode/) \> 2022

## Part 1: After the rearrangement procedure completes, what crate ends up on top of each stack?

I manually downloaded my personal [day 5 input file](https://adventofcode.com/2022/day/5) as a logged user, and here I get the data in a more appropriate shape.

```{r}
library(tidyverse)

data <- 
    read_csv(
        here::here("2022/05_input"),
        col_names = c("lines"),
        show_col_types = FALSE,
        skip_empty_rows = FALSE
    )

data %>% print(n = 11)
```

I represent the starting stack status with a list:

```{r}
stacks <- data %>% 
    filter(str_detect(lines, "\\[")) %>% 
    arrange(-row_number()) %>% 
    separate(lines, into = paste0("c", 1:36), sep = "") %>% 
    pivot_longer(everything()) %>% 
    filter(str_detect(value, "[A-Z]")) %>% 
    pivot_wider(names_from = name, values_from = value, values_fn = list) %>% 
    map(~ .x[[1]]) %>% 
    unname()

stacks
```

I represent the rearrangement of movements with a list of tibbles:

```{r}
extract_next_number <- function(x, pattern) {
    x %>%
        substring(str_locate(x, pattern)[[1]]) %>% 
        str_extract("[0-9]+") %>% 
        as.numeric()
}

moves <- data %>% 
    filter(str_detect(lines, "move")) %>% 
    rowwise() %>% 
    transmute(
        qty = extract_next_number(lines, ""),
        from = extract_next_number(lines, "from"),
        to = extract_next_number(lines, "to"),
    ) 

moves
```

If I move 3 from 1 to 3:

    [D]        
    [N] [C]    
    [Z] [M] [P]
     1   2   3 

It should be:

            [Z]
            [N]
        [C] [D]
        [M] [P]
     1   2   3

I create a helper function and I test the previous example:

```{r}
stacks2 <- list(
  c("Z","N", "D"),
  c("M","C"),
  c("P")
)

make_move <- function(x, qty, from, to) {
  to_move <- rev(tail(x[[from]], qty))
  x[[from]] <- head(x[[from]], -qty)
  x[[to]] <- c(x[[to]], to_move)
  x
}
stacks2
stacks2 %>% make_move(3, 1, 3)
```

Here the full code:

```{r}
library(tidyverse)

data <- 
    read_csv(
        here::here("2022/05_input"),
        col_names = c("lines"),
        show_col_types = FALSE,
        skip_empty_rows = FALSE
    )

extract_next_number <- function(x, pattern) {
    x %>%
        substring(str_locate(x, pattern)[[1]]) %>% 
        str_extract("[0-9]+") %>% 
        as.numeric()
}

make_move <- function(x, qty, from, to) {
  to_move <- rev(tail(x[[from]], qty))
  x[[from]] <- head(x[[from]], -qty)
  x[[to]] <- c(x[[to]], to_move)
  x
}

stacks <- data %>% 
    filter(str_detect(lines, "\\[")) %>% 
    arrange(-row_number()) %>% 
    separate(lines, into = paste0("c", 1:36), sep = "") %>% 
    pivot_longer(everything()) %>% 
    filter(str_detect(value, "[A-Z]")) %>% 
    pivot_wider(names_from = name, values_from = value, values_fn = list) %>% 
    map(~ .x[[1]]) %>% 
    unname()

data %>% 
    filter(str_detect(lines, "move")) %>% 
    rowwise() %>% 
    transmute(
        qty = extract_next_number(lines, ""),
        from = extract_next_number(lines, "from"),
        to = extract_next_number(lines, "to"),
    ) %>% 
    group_split() %>% 
    walk(function(x) {
        qty <- x$qty[[1]]
        from <- x$from[[1]]
        to <- x$to[[1]]
        stacks <<- make_move(stacks, qty, from, to)
    })

stacks %>% map(last) %>% paste(collapse = "")
```

## Part 2: After the rearrangement procedure completes, what crate ends up on top of each stack?

Moving a single crate from stack 2 to stack 1 behaves the same as before:

    [D]        
    [N] [C]    
    [Z] [M] [P]
     1   2   3 

However, the action of moving three crates from stack 1 to stack 3 means that those three moved crates *stay in the same order*, resulting in this new configuration:

            [D]
            [N]
        [C] [Z]
        [M] [P]
     1   2   3

I create a helper function and I test the previous example:

```{r}
stacks2 <- list(
  c("Z","N", "D"),
  c("M","C"),
  c("P")
)

make_move_ordered <- function(x, qty, from, to) {
  to_move <- tail(x[[from]], qty)
  x[[from]] <- head(x[[from]], -qty)
  x[[to]] <- c(x[[to]], to_move)
  x
}

stacks2
stacks2 %>% make_move_ordered(3, 1, 3)
```

Here the full code:

```{r}
library(tidyverse)

data <- 
    read_csv(
        here::here("2022/05_input"),
        col_names = c("lines"),
        show_col_types = FALSE,
        skip_empty_rows = FALSE
    )

extract_next_number <- function(x, pattern) {
    x %>%
        substring(str_locate(x, pattern)[[1]]) %>% 
        str_extract("[0-9]+") %>% 
        as.numeric()
}

make_move_ordered <- function(x, qty, from, to) {
  to_move <- tail(x[[from]], qty)
  x[[from]] <- head(x[[from]], -qty)
  x[[to]] <- c(x[[to]], to_move)
  x
}

stacks <- data %>% 
    filter(str_detect(lines, "\\[")) %>% 
    arrange(-row_number()) %>% 
    separate(lines, into = paste0("c", 1:36), sep = "") %>% 
    pivot_longer(everything()) %>% 
    filter(str_detect(value, "[A-Z]")) %>% 
    pivot_wider(names_from = name, values_from = value, values_fn = list) %>% 
    map(~ .x[[1]]) %>% 
    unname()

data %>% 
    filter(str_detect(lines, "move")) %>% 
    rowwise() %>% 
    transmute(
        qty = extract_next_number(lines, ""),
        from = extract_next_number(lines, "from"),
        to = extract_next_number(lines, "to"),
    ) %>% 
    group_split() %>% 
    walk(function(x) {
        qty <- x$qty[[1]]
        from <- x$from[[1]]
        to <- x$to[[1]]
        stacks <<- make_move_ordered(stacks, qty, from, to)
    })

stacks %>% map(last) %>% paste(collapse = "")
```
